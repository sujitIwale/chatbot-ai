// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  name           String?
  googleId       String?  @unique
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  chatbots Chatbot[]
}

model Chatbot {
  id                   String                @id @default(uuid())
  name                 String
  description          String?
  instructions         String
  context              String?
  ownerId              String
  deployed             Boolean               @default(false)
  deployedAt           DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  lyzrAgentId          String?
  lyzrRagId            String?
  owner                User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  customerSupportUsers CustomerSupportUser[]
  tickets              Ticket[]
  chatSessions         ChatSession[]
}

model CustomerSupportUser {
  id        String   @id @default(uuid())
  name      String
  email     String
  chatbotId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatbot         Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  assignedTickets Ticket[]
  messages        Message[]

  @@unique([email, chatbotId])
}

model Ticket {
  id         String   @id @default(uuid())
  subject    String
  sessionId  String
  chatbotId  String
  assignedTo String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  chatbot      Chatbot              @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  assignedUser CustomerSupportUser? @relation(fields: [assignedTo], references: [id], onDelete: SetNull)
  chatSession  ChatSession          @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id          String        @id @default(uuid())
  chatbotId   String
  userId      String? // Optional customer identifier
  status      SessionStatus @default(ACTIVE)
  handedOff   Boolean       @default(false)
  handedOffAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  chatbot  Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  messages Message[]
  tickets  Ticket[]
}

model Message {
  id        String        @id @default(uuid())
  sessionId String
  content   String
  sender    MessageSender
  senderId  String? // Customer Support User ID if sender is SUPPORT
  createdAt DateTime      @default(now())

  session      ChatSession          @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  supportAgent CustomerSupportUser? @relation(fields: [senderId], references: [id], onDelete: SetNull)
}

enum SessionStatus {
  ACTIVE
  ENDED
  HANDED_OFF
}

enum MessageSender {
  USER
  AGENT
  SUPPORT
}
